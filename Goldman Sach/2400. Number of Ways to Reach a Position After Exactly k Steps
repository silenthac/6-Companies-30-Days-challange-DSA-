class Solution {
public:
    int m = 1e9+7;
    int dp[3005][1005];
    
    
    int solve(int stepsTaken,int startPos,int endPos,int k,int dp[3005][1005])
    {
        
        if(startPos==endPos&&stepsTaken==k)
        {
            return 1;
        }
        
        if(dp[startPos+1005][stepsTaken]!=-1)
        {
            return dp[startPos+1005][stepsTaken];
        }
        
      
        
      
        
       
            
        if(stepsTaken>k)
        {
            return 0;
        }
        
       
        
        int ans = solve(stepsTaken+1,startPos+1,endPos,k,dp)%m;
        ans =  ans%m+solve(stepsTaken+1,startPos-1,endPos,k,dp)%m;
        return dp[startPos+1005][stepsTaken] = ans%m;
        
    }
    int numberOfWays(int startPos, int endPos, int k) {
       // vector<vector<int>>dp(3005,vector<int>(1005,-1));
        memset(dp,-1,sizeof(dp));
       return  solve(0,startPos,endPos,k,dp);
        
    }
};
