/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//class is a data type

/*

my brtue force appraoch was that for each and everynode chechking whether the given substree is bst or  not if yes calculate ans else leave but in this we  have very high time complexity 

so i thought for each node what i need i need maximum from left,mminimum from right whehter the subtree is bst or not and sum of all node . so i made a class.



*/

class info {
    public:
    int mini;
    int maxi;
    bool isbst;
    int sum;
};
class Solution {
    
    info solve(TreeNode* root,int &maxSum)
    {
        if(root==NULL)
        {
            return {INT_MAX,INT_MIN,true,0};
        }
        
        info left= solve(root->left,maxSum);
        info right = solve(root->right,maxSum);
        info currnode;
        currnode.sum = left.sum+right.sum+root->val;
        currnode.mini = min(root->val,left.mini);
        currnode.maxi = max(root->val,right.maxi);
        
        if(left.isbst&&right.isbst&&root->val>left.maxi&&root->val<right.mini)
        {
            currnode.isbst =true;
        }
        else
        {
            currnode.isbst =false;
        }
        
        if(currnode.isbst)
        {
            maxSum =max(maxSum,currnode.sum);
        }
        
        return currnode;
        
        
        
    }
    
    
public:
    int maxSumBST(TreeNode* root) {
        int maxSum=0;
        solve(root,maxSum);
        return maxSum;
        
        
        
    }
};
